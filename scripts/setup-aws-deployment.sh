#!/bin/bash

# One-click setup script for AWS deployment
# This script guides you through the entire deployment process

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to log with colors
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to prompt for user input
prompt_input() {
    local prompt="$1"
    local var_name="$2"
    local default_value="$3"
    
    if [ -n "$default_value" ]; then
        read -p "$prompt [$default_value]: " input
        if [ -z "$input" ]; then
            input="$default_value"
        fi
    else
        read -p "$prompt: " input
        while [ -z "$input" ]; do
            log_warn "This field is required"
            read -p "$prompt: " input
        done
    fi
    
    eval "$var_name='$input'"
}

# Function to check prerequisites
check_prerequisites() {
    log_header "Checking Prerequisites"
    
    local missing_tools=()
    
    # Check required tools
    if ! command_exists aws; then
        missing_tools+=("aws-cli")
    fi
    
    if ! command_exists terraform; then
        missing_tools+=("terraform")
    fi
    
    if ! command_exists docker; then
        missing_tools+=("docker")
    fi
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        log_info "Please install the missing tools and run this script again"
        exit 1
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity > /dev/null 2>&1; then
        log_error "AWS credentials not configured"
        log_info "Please run 'aws configure' to set up your credentials"
        exit 1
    fi
    
    log_info "âœ… All prerequisites met"
}

# Function to collect configuration
collect_configuration() {
    log_header "Configuration Setup"
    
    log_info "Please provide the following information for your deployment:"
    echo
    
    # Project configuration
    prompt_input "Project name" PROJECT_NAME "agentleague"
    prompt_input "AWS region" AWS_REGION "us-east-1"
    prompt_input "Environment" ENVIRONMENT "dev"
    
    # EC2 configuration
    prompt_input "EC2 instance type" INSTANCE_TYPE "t3.medium"
    prompt_input "AWS key pair name" KEY_PAIR_NAME
    prompt_input "Use spot instances? (true/false)" USE_SPOT "true"
    
    if [ "$USE_SPOT" = "true" ]; then
        prompt_input "Maximum spot price" SPOT_PRICE "0.05"
    fi
    
    # Domain and SSL
    prompt_input "Domain name" DOMAIN_NAME
    prompt_input "ACM certificate ARN" CERTIFICATE_ARN

    # GitHub configuration
    prompt_input "GitHub repository (owner/repo)" GITHUB_REPOSITORY "iliagerman/agent_arena"

    # Database configuration
    prompt_input "Use RDS? (true/false)" USE_RDS "false"
    
    echo
    log_info "Configuration collected successfully"
}

# Function to setup secrets
setup_secrets() {
    log_header "Setting Up Secrets"
    
    if [ ! -f "libs/common/secrets.yaml" ]; then
        log_info "Creating secrets file from template..."
        cp libs/common/secrets.example.yaml libs/common/secrets.yaml
        log_warn "Please edit libs/common/secrets.yaml with your actual secrets"
        log_info "Press Enter when you've finished editing the secrets file"
        read -r
    fi
    
    log_info "Uploading secrets to AWS Secrets Manager..."
    chmod +x scripts/setup-secrets.sh
    ./scripts/setup-secrets.sh
}

# Function to create Terraform configuration
create_terraform_config() {
    log_header "Creating Terraform Configuration"
    
    cat > terraform/terraform.tfvars << EOF
# Generated by setup script on $(date)

# AWS Configuration
aws_region = "$AWS_REGION"

# Project Configuration
project_name = "$PROJECT_NAME"
environment  = "$ENVIRONMENT"

# EC2 Configuration
instance_type        = "$INSTANCE_TYPE"
key_pair_name       = "$KEY_PAIR_NAME"
enable_spot_instance = $USE_SPOT
EOF

    if [ "$USE_SPOT" = "true" ]; then
        echo "spot_price          = \"$SPOT_PRICE\"" >> terraform/terraform.tfvars
    fi

    cat >> terraform/terraform.tfvars << EOF

# Domain and SSL
domain_name     = "$DOMAIN_NAME"
certificate_arn = "$CERTIFICATE_ARN"

# GitHub Configuration
github_repository = "$GITHUB_REPOSITORY"

# Database Configuration
use_rds              = $USE_RDS
db_instance_class    = "db.t3.micro"
db_allocated_storage = 20
db_name             = "agent_league"
db_username         = "postgres"
EOF

    log_info "âœ… Terraform configuration created"
}

# Function to deploy infrastructure
deploy_infrastructure() {
    log_header "Deploying Infrastructure"
    
    cd terraform
    
    log_info "Initializing Terraform..."
    terraform init
    
    log_info "Planning deployment..."
    terraform plan
    
    echo
    log_warn "Review the Terraform plan above"
    read -p "Do you want to proceed with the deployment? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Applying Terraform configuration..."
        terraform apply -auto-approve
        log_info "âœ… Infrastructure deployed successfully"
    else
        log_info "Deployment cancelled by user"
        exit 0
    fi
    
    cd ..
}

# Function to setup GitHub Actions
setup_github_actions() {
    log_header "GitHub Actions Setup"
    
    # Get the GitHub Actions role ARN from Terraform output
    GITHUB_ROLE_ARN=$(terraform output -raw github_actions_role_arn 2>/dev/null || echo "Run 'terraform output github_actions_role_arn' to get this value")

    log_info "To complete the setup, add these secrets to your GitHub repository:"
    echo
    log_info "Repository Settings > Secrets and variables > Actions"
    echo
    log_info "Required secrets:"
    log_info "  â€¢ AWS_ROLE_ARN: $GITHUB_ROLE_ARN"
    log_info "  â€¢ DOMAIN_NAME: $DOMAIN_NAME"
    echo
    log_info "âœ… This setup uses secure OIDC authentication (no AWS keys stored in GitHub!)"
    echo
    log_info "After adding the secrets, push your code to trigger the first deployment:"
    log_info "  git add ."
    log_info "  git commit -m 'Add AWS deployment configuration'"
    log_info "  git push origin main"
}

# Function to show next steps
show_next_steps() {
    log_header "Deployment Complete!"
    
    log_info "ðŸŽ‰ Your AWS infrastructure is now deployed!"
    echo
    log_info "Next steps:"
    log_info "1. Add GitHub secrets (see above)"
    log_info "2. Push your code to trigger deployment"
    log_info "3. Monitor deployment with: ./scripts/monitor-deployment.sh"
    log_info "4. Access your application at: https://$DOMAIN_NAME"
    echo
    log_info "Useful commands:"
    log_info "  â€¢ Monitor: ./scripts/monitor-deployment.sh"
    log_info "  â€¢ Manual deploy: ssh to EC2 and run /opt/app/deploy.sh"
    log_info "  â€¢ View logs: AWS CloudWatch Console"
    log_info "  â€¢ Cleanup: cd terraform && terraform destroy"
    echo
    log_info "ðŸ“š For detailed information, see:"
    log_info "  â€¢ README_AWS_DEPLOYMENT.md"
    log_info "  â€¢ docs/AWS_DEPLOYMENT_GUIDE.md"
}

# Main function
main() {
    log_header "AgentLeague AWS Deployment Setup"
    log_info "This script will guide you through deploying AgentLeague to AWS"
    echo
    
    # Check if we're in the right directory
    if [ ! -f "pyproject.toml" ] || [ ! -d "terraform" ]; then
        log_error "Please run this script from the project root directory"
        exit 1
    fi
    
    # Run setup steps
    check_prerequisites
    echo
    
    collect_configuration
    echo
    
    setup_secrets
    echo
    
    create_terraform_config
    echo
    
    deploy_infrastructure
    echo
    
    setup_github_actions
    echo
    
    show_next_steps
}

# Run main function
main "$@"
