# Example secrets file - Copy this to secrets.yaml and fill in your actual secrets
# This file should NOT contain actual secrets, only placeholders
#
# For production environments, consider using AWS Secrets Manager instead.
# Set AWS_SECRETS_MANAGER_SECRET_NAME in your .env.production file to use AWS Secrets Manager.
# The secret in AWS Secrets Manager should contain YAML content with the same structure as this file.
#
# Example AWS Secrets Manager YAML content:
# database:
#   username: "postgres"
#   password: "your_database_password_here"
#   host: "your-rds-endpoint.amazonaws.com"
#   port: 5432
#   name: "mydatabase"
#   url: "postgresql://postgres:your_password@your-rds-endpoint.amazonaws.com:5432/mydatabase"
#
# security:
#   secret_key: "your_secret_key_here"
#   algorithm: "HS256"
#   access_token_expire_minutes: 30
#
# aws:
#   access_key_id: "your_aws_access_key_id"
#   secret_access_key: "your_aws_secret_access_key"

# Database credentials and connection information
database:
  username: "postgres"
  password: "your_database_password_here"
  # Use host.docker.internal for devcontainer, localhost for local development
  host: "host.docker.internal"
  port: 5432
  name: "mydatabase"
  # Full connection string (optional, will be constructed if not provided)
  # Use host.docker.internal for devcontainer compatibility
  url: "postgresql://postgres:your_database_password_here@host.docker.internal:5432/mydatabase"

security:
  secret_key: "your_secret_key_here"
  algorithm: "HS256"
  access_token_expire_minutes: 30

# AWS credentials are now handled via the default AWS credential chain:
# 1. Environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION)
# 2. AWS credentials file (~/.aws/credentials)
# 3. IAM roles (when running on EC2)
# No need to store AWS credentials in this file anymore!

# Cognito configuration is now handled via environment variables
# See .env.development and .env.production for Cognito settings
# The justfile will create Cognito resources and output the IDs/secrets needed

# LLM Provider configurations
llm_providers:
  openai:
    api_key: "sk-your-openai-api-key-here"
    organization: "org-your-organization-id"  # Optional
    base_url: "https://api.openai.com/v1"  # Optional, defaults to OpenAI API
  anthropic:
    api_key: "sk-ant-your-anthropic-api-key-here"
  gemini:
    api_key: "XXXXXX"
    base_url: "https://generativelanguage.googleapis.com"  # Optional
  aws_bedrock:
    api_key: "your-api-token"  # Optional

# Stripe configuration (placeholders)
stripe:
  api_key: "sk_test_xxx"               # Secret key (set real value in secrets.yaml or AWS Secrets Manager)
  publishable_key: "pk_test_xxx"       # Publishable key for client if needed later
  webhook_secret: "whsec_xxx"          # Webhook signing secret


