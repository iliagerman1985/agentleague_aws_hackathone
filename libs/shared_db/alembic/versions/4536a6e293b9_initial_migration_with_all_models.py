"""Initial migration with all models

Revision ID: 4536a6e293b9
Revises: None
Create Date: 2025-10-20 10:01:34.670760

"""

from __future__ import annotations

import warnings

import sqlalchemy as sa
from alembic import op

# Cross-database compatible migration.
# This migration is designed to work with both SQLite (for tests) and PostgreSQL (for development/production).
# Enums are stored as strings to ensure compatibility across database types.

__all__ = ["data_downgrades", "data_upgrades", "downgrade", "schema_downgrades", "schema_upgrades", "upgrade"]

# revision identifiers, used by Alembic.
revision = "4536a6e293b9"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """Schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "error_reports",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=True),
        sa.Column("user_email", sa.String(length=320), nullable=True),
        sa.Column("user_username", sa.String(length=255), nullable=True),
        sa.Column("user_full_name", sa.String(length=255), nullable=True),
        sa.Column("user_role", sa.String(length=50), nullable=True),
        sa.Column("message", sa.Text(), nullable=False),
        sa.Column("name", sa.String(length=200), nullable=True),
        sa.Column("stack", sa.Text(), nullable=True),
        sa.Column("component_stack", sa.Text(), nullable=True),
        sa.Column("url", sa.Text(), nullable=True),
        sa.Column("user_agent", sa.Text(), nullable=True),
        sa.Column("metadata", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_error_reports_user_id"), "error_reports", ["user_id"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("full_name", sa.String(), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default=sa.text("true"), nullable=False),
        sa.Column("role", sa.Enum("admin", "user", name="userrole", native_enum=False), nullable=False),
        sa.Column("cognito_sub", sa.String(), nullable=True),
        sa.Column("coins_balance", sa.Integer(), server_default="0", nullable=False),
        sa.Column("avatar_url", sa.Text(), nullable=True),
        sa.Column("avatar_type", sa.Enum("google", "uploaded", "default", name="avatartype", native_enum=False), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_cognito_sub"), "users", ["cognito_sub"], unique=True)
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "agents",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=True),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("game_environment", sa.String(length=50), nullable=False),
        sa.Column("auto_buy", sa.Boolean(), nullable=False),
        sa.Column("auto_reenter", sa.Boolean(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_archived", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("archived_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_system", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("can_play_in_real_matches", sa.Boolean(), server_default="true", nullable=False),
        sa.Column("avatar_url", sa.Text(), nullable=True),
        sa.Column("avatar_type", sa.Enum("google", "uploaded", "default", name="avatartype", native_enum=False), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_agents_user_id"), "agents", ["user_id"], unique=False)
    op.create_table(
        "games",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("game_type", sa.Enum("texas_holdem", "chess", name="gametype", native_enum=False), nullable=False),
        sa.Column("state", sa.JSON(), nullable=False),
        sa.Column("config", sa.JSON(), nullable=False),
        sa.Column("requesting_user_id", sa.BigInteger(), nullable=False),
        sa.Column("processing_started_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("processing_request_id", sa.BigInteger(), nullable=True),
        sa.Column("version", sa.Integer(), server_default="0", nullable=False),
        sa.Column("is_playground", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("turn", sa.Integer(), server_default="1", nullable=False),
        sa.Column(
            "matchmaking_status",
            sa.Enum("waiting", "in_progress", "finished", "cancelled", name="matchmakingstatus", native_enum=False),
            server_default="waiting",
            nullable=False,
        ),
        sa.Column("waiting_deadline", sa.DateTime(timezone=True), nullable=True),
        sa.Column("allows_midgame_joining", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("current_player_count", sa.Integer(), server_default="0", nullable=False),
        sa.Column("min_players_required", sa.Integer(), nullable=True),
        sa.Column("max_players_allowed", sa.Integer(), nullable=True),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["requesting_user_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_games_requesting_user_id"), "games", ["requesting_user_id"], unique=False)
    op.create_table(
        "llm_integrations",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("provider", sa.String(length=20), nullable=False),
        sa.Column("api_key_encrypted", sa.Text(), nullable=False),
        sa.Column("selected_model", sa.String(length=100), nullable=False),
        sa.Column("display_name", sa.String(length=100), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_default", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "provider", name="unique_user_provider"),
    )
    op.create_index(op.f("ix_llm_integrations_user_id"), "llm_integrations", ["user_id"], unique=False)
    op.create_table(
        "test_scenarios",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=True),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("environment", sa.String(length=50), nullable=False),
        sa.Column("game_state", sa.JSON(), nullable=False),
        sa.Column("tags", sa.JSON(), nullable=True),
        sa.Column("is_system", sa.Boolean(), server_default="false", nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_test_scenarios_user_id"), "test_scenarios", ["user_id"], unique=False)
    op.create_table(
        "tools",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=True),
        sa.Column("display_name", sa.String(length=150), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("code", sa.Text(), nullable=False),
        sa.Column("environment", sa.Enum("texas_holdem", "chess", name="gametype", native_enum=False), nullable=False),
        sa.Column(
            "validation_status", sa.Enum("valid", "error", "pending", name="toolvalidationstatus", native_enum=False), server_default="valid", nullable=False
        ),
        sa.Column("is_system", sa.Boolean(), server_default="false", nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tools_environment"), "tools", ["environment"], unique=False)
    op.create_index(op.f("ix_tools_name"), "tools", ["name"], unique=False)
    op.create_index(op.f("ix_tools_user_id"), "tools", ["user_id"], unique=False)
    op.create_table(
        "agent_statistics",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("agent_id", sa.BigInteger(), nullable=False),
        sa.Column("statistics", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(["agent_id"], ["agents.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_agent_statistics_agent_id"), "agent_statistics", ["agent_id"], unique=True)
    op.create_table(
        "agent_versions",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("agent_id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("version_number", sa.Integer(), nullable=False),
        sa.Column("system_prompt", sa.Text(), nullable=False),
        sa.Column("conversation_instructions", sa.Text(), nullable=True),
        sa.Column("exit_criteria", sa.Text(), nullable=True),
        sa.Column("slow_llm_provider", sa.String(length=20), nullable=False),
        sa.Column("fast_llm_provider", sa.String(length=20), nullable=False),
        sa.Column("slow_llm_model", sa.String(length=100), nullable=True),
        sa.Column("fast_llm_model", sa.String(length=100), nullable=True),
        sa.Column("timeout", sa.Integer(), nullable=False),
        sa.Column("max_iterations", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["agent_id"], ["agents.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("agent_id", "version_number", name="unique_agent_version"),
    )
    op.create_index(op.f("ix_agent_versions_agent_id"), "agent_versions", ["agent_id"], unique=False)
    op.create_table(
        "game_events",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("game_id", sa.BigInteger(), nullable=False),
        sa.Column("type", sa.String(length=100), nullable=False),
        sa.Column("data", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(["game_id"], ["games.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_game_events_game_id"), "game_events", ["game_id"], unique=False)
    op.create_table(
        "agent_version_tools",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("agent_version_id", sa.BigInteger(), nullable=False),
        sa.Column("tool_id", sa.BigInteger(), nullable=False),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["agent_version_id"], ["agent_versions.id"]),
        sa.ForeignKeyConstraint(["tool_id"], ["tools.id"]),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("agent_version_id", "order", name="unique_agent_version_tool_order"),
        sa.UniqueConstraint("agent_version_id", "tool_id", name="unique_agent_version_tool"),
    )
    op.create_index(op.f("ix_agent_version_tools_agent_version_id"), "agent_version_tools", ["agent_version_id"], unique=False)
    op.create_index(op.f("ix_agent_version_tools_tool_id"), "agent_version_tools", ["tool_id"], unique=False)
    op.create_table(
        "game_players",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("game_id", sa.BigInteger(), nullable=False),
        sa.Column("agent_version_id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("env", sa.Enum("texas_holdem", "chess", name="gametype", native_enum=False), nullable=False),
        sa.Column("join_time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("leave_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_system_player", sa.Boolean(), server_default="false", nullable=False),
        sa.ForeignKeyConstraint(["agent_version_id"], ["agent_versions.id"]),
        sa.ForeignKeyConstraint(["game_id"], ["games.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_game_players_game_user", "game_players", ["game_id", "user_id"], unique=False)
    op.create_index("idx_game_players_user_env_leave", "game_players", ["user_id", "env", "leave_time"], unique=False)
    op.create_table(
        "llm_usage",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("agent_version_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "scenario",
            sa.String(),
            nullable=False,
            comment="Type of LLM usage: agent_move, tool_generation, test_generation, state_generation, agent_instructions_generation",
        ),
        sa.Column("model_used", sa.String(), nullable=False, comment="LLM model identifier (e.g., gpt-4, claude-3-5-sonnet)"),
        sa.Column("cost_usd", sa.Float(), nullable=False, comment="Cost in USD for this API call"),
        sa.Column("input_tokens", sa.Integer(), nullable=False, comment="Number of tokens in the prompt"),
        sa.Column("output_tokens", sa.Integer(), nullable=False, comment="Number of tokens in the completion"),
        sa.Column("total_tokens", sa.Integer(), nullable=False, comment="Total tokens used (input + output)"),
        sa.Column("execution_time_ms", sa.Integer(), nullable=False, comment="Time taken to execute the LLM call in milliseconds"),
        sa.Column("input_prompt", sa.Text(), nullable=False, comment="Full prompt sent to the LLM"),
        sa.Column("output_response", sa.Text(), nullable=False, comment="Full response received from the LLM"),
        sa.Column("game_id", sa.BigInteger(), nullable=True),
        sa.Column("tool_id", sa.BigInteger(), nullable=True),
        sa.Column("test_scenario_id", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(["agent_version_id"], ["agent_versions.id"]),
        sa.ForeignKeyConstraint(["game_id"], ["games.id"]),
        sa.ForeignKeyConstraint(["test_scenario_id"], ["test_scenarios.id"]),
        sa.ForeignKeyConstraint(["tool_id"], ["tools.id"]),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("ix_llm_usage_agent_created", "llm_usage", ["agent_version_id", "created_at"], unique=False)
    op.create_index(op.f("ix_llm_usage_agent_version_id"), "llm_usage", ["agent_version_id"], unique=False)
    op.create_index(op.f("ix_llm_usage_created_at"), "llm_usage", ["created_at"], unique=False)
    op.create_index("ix_llm_usage_game_created", "llm_usage", ["game_id", "created_at"], unique=False)
    op.create_index(op.f("ix_llm_usage_game_id"), "llm_usage", ["game_id"], unique=False)
    op.create_index(op.f("ix_llm_usage_scenario"), "llm_usage", ["scenario"], unique=False)
    op.create_index("ix_llm_usage_scenario_created", "llm_usage", ["scenario", "created_at"], unique=False)
    op.create_index(op.f("ix_llm_usage_test_scenario_id"), "llm_usage", ["test_scenario_id"], unique=False)
    op.create_index(op.f("ix_llm_usage_tool_id"), "llm_usage", ["tool_id"], unique=False)
    op.create_index("ix_llm_usage_user_created", "llm_usage", ["user_id", "created_at"], unique=False)
    op.create_index(op.f("ix_llm_usage_user_id"), "llm_usage", ["user_id"], unique=False)
    op.create_table(
        "test_scenario_results",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("test_scenario_id", sa.BigInteger(), nullable=False),
        sa.Column("agent_version_id", sa.BigInteger(), nullable=False),
        sa.Column("total_execution_sessions", sa.Integer(), nullable=False),
        sa.Column("successful_sessions", sa.Integer(), nullable=False),
        sa.Column("failed_sessions", sa.Integer(), nullable=False),
        sa.Column("total_execution_time_ms", sa.Integer(), nullable=False),
        sa.Column("average_iterations_per_session", sa.Integer(), nullable=False),
        sa.Column("total_validation_attempts", sa.Integer(), nullable=False),
        sa.Column("final_outcome", sa.JSON(), nullable=True),
        sa.Column("score", sa.JSON(), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["agent_version_id"], ["agent_versions.id"]),
        sa.ForeignKeyConstraint(["test_scenario_id"], ["test_scenarios.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_test_scenario_results_agent_version_id"), "test_scenario_results", ["agent_version_id"], unique=False)
    op.create_index(op.f("ix_test_scenario_results_test_scenario_id"), "test_scenario_results", ["test_scenario_id"], unique=False)
    op.create_table(
        "agent_execution_sessions",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("agent_version_id", sa.BigInteger(), nullable=False),
        sa.Column("execution_type", sa.String(), nullable=False),
        sa.Column("game_id", sa.BigInteger(), nullable=True),
        sa.Column("test_scenario_id", sa.BigInteger(), nullable=True),
        sa.Column("test_scenario_result_id", sa.BigInteger(), nullable=True),
        sa.Column("move_number", sa.Integer(), nullable=True),
        sa.Column("game_state_snapshot", sa.JSON(), nullable=False),
        sa.Column("final_action", sa.JSON(), nullable=False),
        sa.Column("final_reasoning", sa.Text(), nullable=True),
        sa.Column("total_iterations", sa.Integer(), nullable=False),
        sa.Column("execution_time_ms", sa.Integer(), nullable=False),
        sa.Column("validation_attempts", sa.Integer(), nullable=False),
        sa.Column("success", sa.Boolean(), nullable=False),
        sa.Column("total_input_tokens", sa.Integer(), nullable=True),
        sa.Column("total_output_tokens", sa.Integer(), nullable=True),
        sa.Column("total_tokens_used", sa.Integer(), nullable=True),
        sa.Column("total_cost_usd", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(["agent_version_id"], ["agent_versions.id"]),
        sa.ForeignKeyConstraint(["test_scenario_id"], ["test_scenarios.id"]),
        sa.ForeignKeyConstraint(["test_scenario_result_id"], ["test_scenario_results.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_game_move", "agent_execution_sessions", ["game_id", "move_number"], unique=False)
    op.create_index("idx_version_game", "agent_execution_sessions", ["agent_version_id", "game_id"], unique=False)
    op.create_index("idx_version_test", "agent_execution_sessions", ["agent_version_id", "test_scenario_id"], unique=False)
    op.create_index(op.f("ix_agent_execution_sessions_agent_version_id"), "agent_execution_sessions", ["agent_version_id"], unique=False)
    op.create_index(op.f("ix_agent_execution_sessions_execution_type"), "agent_execution_sessions", ["execution_type"], unique=False)
    op.create_index(op.f("ix_agent_execution_sessions_game_id"), "agent_execution_sessions", ["game_id"], unique=False)
    op.create_index(op.f("ix_agent_execution_sessions_move_number"), "agent_execution_sessions", ["move_number"], unique=False)
    op.create_index(op.f("ix_agent_execution_sessions_test_scenario_id"), "agent_execution_sessions", ["test_scenario_id"], unique=False)
    op.create_index(op.f("ix_agent_execution_sessions_test_scenario_result_id"), "agent_execution_sessions", ["test_scenario_result_id"], unique=False)
    op.create_table(
        "agent_iteration_history",
        sa.Column("id", sa.BigInteger(), autoincrement=False, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("execution_session_id", sa.BigInteger(), nullable=False),
        sa.Column("iteration_number", sa.Integer(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("tool_name", sa.String(), nullable=True),
        sa.Column("tool_parameters", sa.JSON(), nullable=True),
        sa.Column("next_step_type", sa.String(), nullable=True),
        sa.Column("next_step_details", sa.JSON(), nullable=True),
        sa.Column("llm_model", sa.String(), nullable=True),
        sa.Column("execution_time_ms", sa.Integer(), nullable=True),
        sa.Column("input_tokens", sa.Integer(), nullable=True),
        sa.Column("output_tokens", sa.Integer(), nullable=True),
        sa.Column("total_tokens", sa.Integer(), nullable=True),
        sa.Column("cost_usd", sa.Float(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["execution_session_id"], ["agent_execution_sessions.id"]),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_agent_iteration_history_execution_session_id"), "agent_iteration_history", ["execution_session_id"], unique=False)
    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """Schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_agent_iteration_history_execution_session_id"), table_name="agent_iteration_history")
    op.drop_table("agent_iteration_history")
    op.drop_index(op.f("ix_agent_execution_sessions_test_scenario_result_id"), table_name="agent_execution_sessions")
    op.drop_index(op.f("ix_agent_execution_sessions_test_scenario_id"), table_name="agent_execution_sessions")
    op.drop_index(op.f("ix_agent_execution_sessions_move_number"), table_name="agent_execution_sessions")
    op.drop_index(op.f("ix_agent_execution_sessions_game_id"), table_name="agent_execution_sessions")
    op.drop_index(op.f("ix_agent_execution_sessions_execution_type"), table_name="agent_execution_sessions")
    op.drop_index(op.f("ix_agent_execution_sessions_agent_version_id"), table_name="agent_execution_sessions")
    op.drop_index("idx_version_test", table_name="agent_execution_sessions")
    op.drop_index("idx_version_game", table_name="agent_execution_sessions")
    op.drop_index("idx_game_move", table_name="agent_execution_sessions")
    op.drop_table("agent_execution_sessions")
    op.drop_index(op.f("ix_test_scenario_results_test_scenario_id"), table_name="test_scenario_results")
    op.drop_index(op.f("ix_test_scenario_results_agent_version_id"), table_name="test_scenario_results")
    op.drop_table("test_scenario_results")
    op.drop_index(op.f("ix_llm_usage_user_id"), table_name="llm_usage")
    op.drop_index("ix_llm_usage_user_created", table_name="llm_usage")
    op.drop_index(op.f("ix_llm_usage_tool_id"), table_name="llm_usage")
    op.drop_index(op.f("ix_llm_usage_test_scenario_id"), table_name="llm_usage")
    op.drop_index("ix_llm_usage_scenario_created", table_name="llm_usage")
    op.drop_index(op.f("ix_llm_usage_scenario"), table_name="llm_usage")
    op.drop_index(op.f("ix_llm_usage_game_id"), table_name="llm_usage")
    op.drop_index("ix_llm_usage_game_created", table_name="llm_usage")
    op.drop_index(op.f("ix_llm_usage_created_at"), table_name="llm_usage")
    op.drop_index(op.f("ix_llm_usage_agent_version_id"), table_name="llm_usage")
    op.drop_index("ix_llm_usage_agent_created", table_name="llm_usage")
    op.drop_table("llm_usage")
    op.drop_index("idx_game_players_user_env_leave", table_name="game_players")
    op.drop_index("idx_game_players_game_user", table_name="game_players")
    op.drop_table("game_players")
    op.drop_index(op.f("ix_agent_version_tools_tool_id"), table_name="agent_version_tools")
    op.drop_index(op.f("ix_agent_version_tools_agent_version_id"), table_name="agent_version_tools")
    op.drop_table("agent_version_tools")
    op.drop_index(op.f("ix_game_events_game_id"), table_name="game_events")
    op.drop_table("game_events")
    op.drop_index(op.f("ix_agent_versions_agent_id"), table_name="agent_versions")
    op.drop_table("agent_versions")
    op.drop_index(op.f("ix_agent_statistics_agent_id"), table_name="agent_statistics")
    op.drop_table("agent_statistics")
    op.drop_index(op.f("ix_tools_user_id"), table_name="tools")
    op.drop_index(op.f("ix_tools_name"), table_name="tools")
    op.drop_index(op.f("ix_tools_environment"), table_name="tools")
    op.drop_table("tools")
    op.drop_index(op.f("ix_test_scenarios_user_id"), table_name="test_scenarios")
    op.drop_table("test_scenarios")
    op.drop_index(op.f("ix_llm_integrations_user_id"), table_name="llm_integrations")
    op.drop_table("llm_integrations")
    op.drop_index(op.f("ix_games_requesting_user_id"), table_name="games")
    op.drop_table("games")
    op.drop_index(op.f("ix_agents_user_id"), table_name="agents")
    op.drop_table("agents")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_index(op.f("ix_users_cognito_sub"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_error_reports_user_id"), table_name="error_reports")
    op.drop_table("error_reports")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
